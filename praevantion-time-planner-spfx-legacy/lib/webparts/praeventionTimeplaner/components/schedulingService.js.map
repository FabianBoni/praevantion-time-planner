{"version":3,"sources":["webparts/praeventionTimeplaner/components/schedulingService.ts"],"names":[],"mappings":"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","file":"webparts/praeventionTimeplaner/components/schedulingService.js","sourcesContent":["import { TeamMember, TimeSlot, AppointmentRequest, ScheduledAppointment, School } from './types';\r\nimport { addWeeks, addDays, isWithinInterval, format, parseISO, startOfDay } from 'date-fns';\r\nimport { de } from 'date-fns/locale';\r\n\r\n// Simulation von Outlook-Kalenderdaten\r\nexport class SchedulingService {\r\n  \r\n  // Prüft ob zwei Teammitglieder gemischtgeschlechtlich sind\r\n  static isValidTeamPair(member1: TeamMember, member2: TeamMember): boolean {\r\n    return member1.gender !== member2.gender;\r\n  }\r\n\r\n  // Generiert alle möglichen gemischtgeschlechtlichen Teampaare\r\n  static generateTeamPairs(teamMembers: TeamMember[]): [TeamMember, TeamMember][] {\r\n    const pairs: [TeamMember, TeamMember][] = [];\r\n    \r\n    for (let i = 0; i < teamMembers.length; i++) {\r\n      for (let j = i + 1; j < teamMembers.length; j++) {\r\n        if (this.isValidTeamPair(teamMembers[i], teamMembers[j])) {\r\n          pairs.push([teamMembers[i], teamMembers[j]]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return pairs;\r\n  }\r\n\r\n  // Konvertiert Wochentag-String zu Datum\r\n  static getNextDateForDay(dayName: string, startDate: Date = new Date()): Date {\r\n    const dayIndex = {\r\n      'monday': 1,\r\n      'tuesday': 2, \r\n      'wednesday': 3,\r\n      'thursday': 4,\r\n      'friday': 5,\r\n      'saturday': 6,\r\n      'sunday': 0\r\n    }[dayName.toLowerCase()];\r\n\r\n    if (dayIndex === undefined) {\r\n      throw new Error(`Unbekannter Wochentag: ${dayName}`);\r\n    }\r\n\r\n    const currentDay = startDate.getDay();\r\n    const daysUntilTarget = (dayIndex - currentDay + 7) % 7;\r\n    const targetDate = addDays(startDate, daysUntilTarget === 0 ? 7 : daysUntilTarget);\r\n    \r\n    return targetDate;\r\n  }\r\n\r\n  // Prüft Verfügbarkeit eines Teams an einem bestimmten Datum/Zeit\r\n  static isTeamAvailable(\r\n    team: [TeamMember, TeamMember], \r\n    date: Date, \r\n    startTime: string, \r\n    endTime: string,\r\n    existingAppointments: ScheduledAppointment[] = []\r\n  ): boolean {\r\n    const dayName = format(date, 'EEEE', { locale: de }).toLowerCase();\r\n    \r\n    // Prüfe ob beide Teammitglieder grundsätzlich verfügbar sind\r\n    for (const member of team) {\r\n      const dayAvailability = member.availability && member.availability.find(slot => \r\n        slot.day.toLowerCase() === dayName\r\n      );\r\n      \r\n      if (!dayAvailability) {\r\n        return false; // Kein verfügbares Zeitfenster für diesen Tag\r\n      }\r\n      \r\n      // Prüfe Zeitüberschneidung\r\n      if (startTime < dayAvailability.startTime || endTime > dayAvailability.endTime) {\r\n        return false; // Gewünschte Zeit liegt außerhalb der Verfügbarkeit\r\n      }\r\n    }\r\n\r\n    // Prüfe auf Konflikte mit bestehenden Terminen\r\n    const dateStr = format(date, 'yyyy-MM-dd');\r\n    for (const appointment of existingAppointments) {\r\n      const appointmentDateStr = format(appointment.date, 'yyyy-MM-dd');\r\n      \r\n      if (appointmentDateStr === dateStr) {\r\n        // Prüfe ob eines der Teammitglieder bereits einen Termin hat\r\n        for (const teamMember of team) {\r\n          if (appointment.teamMembers.some(m => m.id === teamMember.id)) {\r\n            // Prüfe Zeitüberschneidung\r\n            if (!(endTime <= appointment.startTime || startTime >= appointment.endTime)) {\r\n              return false; // Zeitkonflikt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Sucht verfügbare Termine für eine Terminserie\r\n  static findAvailableAppointmentSeries(\r\n    teamMembers: TeamMember[],\r\n    request: AppointmentRequest,\r\n    school: School,\r\n    existingAppointments: ScheduledAppointment[] = [],\r\n    startFromDate: Date = new Date()\r\n  ): ScheduledAppointment[][] {\r\n    const availableSeries: ScheduledAppointment[][] = [];\r\n    const teamPairs = this.generateTeamPairs(teamMembers);\r\n    \r\n    // Für jedes mögliche Teampaar\r\n    for (const teamPair of teamPairs) {\r\n      const series = this.findSeriesForTeam(\r\n        teamPair,\r\n        request,\r\n        school,\r\n        existingAppointments,\r\n        startFromDate\r\n      );\r\n      \r\n      if (series.length > 0) {\r\n        availableSeries.push(series);\r\n      }\r\n    }\r\n\r\n    // Sortiere nach frühestem Startdatum\r\n    availableSeries.sort((a, b) => \r\n      a[0].date.getTime() - b[0].date.getTime()\r\n    );\r\n\r\n    return availableSeries.slice(0, 5); // Maximal 5 Optionen zurückgeben\r\n  }\r\n\r\n  private static findSeriesForTeam(\r\n    teamPair: [TeamMember, TeamMember],\r\n    request: AppointmentRequest,\r\n    school: School,\r\n    existingAppointments: ScheduledAppointment[],\r\n    startFromDate: Date\r\n  ): ScheduledAppointment[] {\r\n    const seriesId = `series_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    const appointments: ScheduledAppointment[] = [];\r\n    \r\n    // Starte die Suche ab dem nächstmöglichen Datum\r\n    let searchDate = new Date(startFromDate);\r\n    const maxSearchWeeks = 52; // Suche bis zu einem Jahr in die Zukunft\r\n    \r\n    for (let weekOffset = 0; weekOffset < maxSearchWeeks && appointments.length < 5; weekOffset++) {\r\n      const currentSearchDate = addWeeks(searchDate, weekOffset);\r\n      \r\n      // Prüfe jeden gewünschten Wochentag\r\n      for (const preferredDay of request.preferredDays) {\r\n        if (appointments.length >= 5) break;\r\n        \r\n        const targetDate = this.getNextDateForDay(preferredDay, currentSearchDate);\r\n        \r\n        // Stelle sicher, dass die Termine den Mindestabstand haben\r\n        if (appointments.length > 0) {\r\n          const lastAppointment = appointments[appointments.length - 1];\r\n          const weeksDifference = Math.floor(\r\n            (targetDate.getTime() - lastAppointment.date.getTime()) / (7 * 24 * 60 * 60 * 1000)\r\n          );\r\n          \r\n          // Mindestens 2 Wochen, maximal 4 Wochen Abstand\r\n          if (weeksDifference < 2 || weeksDifference > 4) {\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Prüfe Verfügbarkeit\r\n        if (this.isTeamAvailable(\r\n          teamPair,\r\n          targetDate,\r\n          request.preferredTimeStart,\r\n          request.preferredTimeEnd,\r\n          [...existingAppointments, ...appointments]\r\n        )) {\r\n          const appointment: ScheduledAppointment = {\r\n            id: `${seriesId}_${appointments.length + 1}`,\r\n            date: targetDate,\r\n            startTime: request.preferredTimeStart,\r\n            endTime: request.preferredTimeEnd,\r\n            teamMembers: teamPair,\r\n            school,\r\n            teacherName: request.teacherName,\r\n            sessionNumber: appointments.length + 1,\r\n            series: seriesId\r\n          };\r\n          \r\n          appointments.push(appointment);\r\n          \r\n          // Nach dem ersten Termin, suche nur noch in 2-4 Wochen Abständen\r\n          if (appointments.length === 1) {\r\n            searchDate = addWeeks(targetDate, 2); // Nächste Suche beginnt 2 Wochen später\r\n            weekOffset = -1; // Reset week offset da wir searchDate geändert haben\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Gib nur vollständige Serien (5 Termine) zurück\r\n    return appointments.length === 5 ? appointments : [];\r\n  }\r\n\r\n  // Hilfsfunktion um Beispiel-Verfügbarkeiten zu erstellen\r\n  static createSampleAvailability(): TimeSlot[] {\r\n    return [\r\n      {\r\n        day: 'monday',\r\n        startTime: '08:00',\r\n        endTime: '17:00',\r\n        recurring: true\r\n      },\r\n      {\r\n        day: 'tuesday', \r\n        startTime: '08:00',\r\n        endTime: '17:00',\r\n        recurring: true\r\n      },\r\n      {\r\n        day: 'wednesday',\r\n        startTime: '08:00',\r\n        endTime: '17:00', \r\n        recurring: true\r\n      },\r\n      {\r\n        day: 'thursday',\r\n        startTime: '08:00',\r\n        endTime: '17:00',\r\n        recurring: true\r\n      },\r\n      {\r\n        day: 'friday',\r\n        startTime: '08:00',\r\n        endTime: '16:00',\r\n        recurring: true\r\n      }\r\n    ];\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}